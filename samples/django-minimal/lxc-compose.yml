# Minimal Django Application - Single Alpine Container
# Ultra-lightweight setup with PostgreSQL and Django in one container

version: '1.0'

containers:
  sample-django-minimal:
    template: alpine
    release: "3.19"
    
    mounts:
      - .:/app
    
    exposed_ports:
      - 8000  # Django dev server
      - 5432  # PostgreSQL (optional external access)
    
    packages:
      - postgresql
      - postgresql-client
      - python3
      - py3-pip
      - python3-dev
      - gcc
      - musl-dev
      - linux-headers
      - postgresql-dev
      - build-base
      - libffi-dev
    
    # Note: Environment variables from .env are automatically available
    services:
      postgresql:
        type: system
        config: |
          # Initialize PostgreSQL if needed
          if [ ! -d /var/lib/postgresql/data ]; then
            mkdir -p /run/postgresql
            chown postgres:postgres /run/postgresql
            su postgres -c "initdb -D /var/lib/postgresql/data"
            
            # Configure PostgreSQL
            echo "host all all 127.0.0.1/32 md5" >> /var/lib/postgresql/data/pg_hba.conf
            echo "host all all 10.0.3.0/24 md5" >> /var/lib/postgresql/data/pg_hba.conf
            echo "listen_addresses = '*'" >> /var/lib/postgresql/data/postgresql.conf
          fi
          
          # Start PostgreSQL
          su postgres -c "pg_ctl -D /var/lib/postgresql/data -l /var/lib/postgresql/logfile start"
          
          # Wait for PostgreSQL to be ready
          sleep 5
          
          # Create database and user if they don't exist (using env vars)
          su postgres -c "createdb ${DB_NAME} 2>/dev/null || true"
          su postgres -c "psql -c \"CREATE USER ${DB_USER} WITH PASSWORD '${DB_PASSWORD}';\" 2>/dev/null || true"
          su postgres -c "psql -c \"GRANT ALL PRIVILEGES ON DATABASE ${DB_NAME} TO ${DB_USER};\" 2>/dev/null || true"
      
      django:
        command: /app/venv/bin/python /app/src/manage.py runserver 0.0.0.0:8000
        directory: /app/src
        autostart: true
        autorestart: true
        stdout_logfile: /var/log/django.log
        stderr_logfile: /var/log/django_err.log
    
    post_install:
      - name: "Setup PostgreSQL"
        command: |
          # Initialize PostgreSQL
          mkdir -p /run/postgresql
          chown postgres:postgres /run/postgresql
          su postgres -c "initdb -D /var/lib/postgresql/data"
          
          # Configure PostgreSQL
          echo "host all all 127.0.0.1/32 md5" >> /var/lib/postgresql/data/pg_hba.conf
          echo "host all all 10.0.3.0/24 md5" >> /var/lib/postgresql/data/pg_hba.conf
          echo "listen_addresses = '*'" >> /var/lib/postgresql/data/postgresql.conf
          
          # Start PostgreSQL
          su postgres -c "pg_ctl -D /var/lib/postgresql/data -l /var/lib/postgresql/logfile start"
          sleep 5
          
          # Create database and user (using env vars from .env)
          su postgres -c "createdb ${DB_NAME}"
          su postgres -c "psql -c \"CREATE USER ${DB_USER} WITH PASSWORD '${DB_PASSWORD}';\""
          su postgres -c "psql -c \"GRANT ALL PRIVILEGES ON DATABASE ${DB_NAME} TO ${DB_USER};\""
      
      - name: "Setup Python environment"
        command: |
          cd /app
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: "Run migrations"
        command: |
          # Ensure PostgreSQL is running
          su postgres -c "pg_ctl -D /var/lib/postgresql/data -l /var/lib/postgresql/logfile start" || true
          sleep 3
          
          cd /app/src
          source ../venv/bin/activate
          # Environment variables are already available from .env
          python manage.py migrate
          python manage.py collectstatic --noinput || true
      
      - name: "Create superuser"
        command: |
          cd /app/src
          source ../venv/bin/activate
          # Using env vars from .env
          python manage.py createsuperuser --noinput --username ${ADMIN_USER} --email ${ADMIN_EMAIL} || true
          echo "from django.contrib.auth import get_user_model; User = get_user_model(); u, _ = User.objects.get_or_create(username='${ADMIN_USER}'); u.set_password('${ADMIN_PASSWORD}'); u.save()" | python manage.py shell
      
      - name: "Create startup script"
        command: |
          # Create a startup script to ensure PostgreSQL starts before Django
          cat > /startup.sh << 'EOF'
          #!/bin/sh
          # Start PostgreSQL
          su postgres -c "pg_ctl -D /var/lib/postgresql/data -l /var/lib/postgresql/logfile start"
          sleep 3
          
          # Start Django (env vars already loaded system-wide)
          cd /app/src
          source ../venv/bin/activate
          python manage.py runserver 0.0.0.0:8000
          EOF
          chmod +x /startup.sh