# Minimal Django Application with PostgreSQL
# Multi-container setup using library services

version: '1.0'

containers:
  sample-django-minimal-database:
    template: alpine-3.19
    
    # Use pre-configured PostgreSQL from library
    includes:
      - postgresql
    
    # Configure PostgreSQL for Django
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}  
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    
    # Additional Django-specific setup
    post_install:
      - name: "Configure PostgreSQL for Django"
        command: |
          # Wait for PostgreSQL to start
          sleep 5
          
          # Create Django user if different from postgres
          if [ "${DB_USER}" != "postgres" ]; then
            su postgres -c "psql -c \"CREATE USER ${DB_USER} WITH PASSWORD '${DB_PASSWORD}';\"" || true
            su postgres -c "psql -c \"GRANT ALL PRIVILEGES ON DATABASE ${DB_NAME} TO ${DB_USER};\"" || true
            su postgres -c "psql -d ${DB_NAME} -c \"GRANT ALL ON SCHEMA public TO ${DB_USER};\"" || true
          fi

  sample-django-minimal-app:
    template: ubuntu-22.04
    
    # Include Python3 with all build tools
    includes:
      - python3
    
    depends_on:
      - sample-django-minimal-database
    
    mounts:
      - .:/app
    
    exposed_ports:
      - 8000    # Django development server
    
    logs:
      - django:/var/log/django/django.log
      - django-error:/var/log/django/django_err.log
    
    tests:
      internal:
        - health:/app/tests/internal_tests.sh
      external:
        - health:/app/tests/external_tests.sh
      port_forwarding:
        - iptables:/app/tests/port_forwarding_tests.sh
    
    packages:
      # Only packages not provided by python3 include
      - libpq-dev           # For psycopg2
      - postgresql-client   # For psql CLI
      - curl                # For testing
    
    services:
      django:
        command: /app/venv/bin/python /app/src/manage.py runserver 0.0.0.0:8000
        directory: /app/src
        autostart: true
        autorestart: true
        stdout_logfile: /var/log/django/django.log
        stderr_logfile: /var/log/django/django_err.log
        startsecs: 10
        stopwaitsecs: 600
    
    post_install:
      - name: "Setup Django directories"
        command: |
          mkdir -p /var/log/django /run/django
          mkdir -p /app/static /app/media
      
      - name: "Setup Python environment"
        command: |
          cd /app
          python3 -m venv venv
          ./venv/bin/pip install --upgrade pip setuptools wheel
          ./venv/bin/pip install -r requirements.txt
      
      - name: "Run Django migrations"
        command: |
          cd /app/src
          # Wait for PostgreSQL
          echo "Waiting for PostgreSQL..."
          for i in $(seq 1 30); do
            if PGPASSWORD=${DB_PASSWORD} psql -h ${DB_HOST} -U ${DB_USER} -d ${DB_NAME} -c "SELECT 1" > /dev/null 2>&1; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for PostgreSQL... (attempt $i/30)"
            sleep 2
          done
          ../venv/bin/python manage.py migrate
          ../venv/bin/python manage.py collectstatic --noinput
      
      - name: "Create Django superuser"
        command: |
          cd /app/src
          ../venv/bin/python manage.py createsuperuser --noinput --username ${ADMIN_USER} --email ${ADMIN_EMAIL} || true
          echo "from django.contrib.auth import get_user_model; User = get_user_model(); u = User.objects.get(username='${ADMIN_USER}'); u.set_password('${ADMIN_PASSWORD}'); u.save()" | ../venv/bin/python manage.py shell