# Minimal Django Application - Single Alpine Container
# Ultra-lightweight setup with PostgreSQL and Django in one container

version: '1.0'

containers:
  sample-django-minimal:
    template: alpine
    release: "3.19"
    
    mounts:
      - .:/app
      - ./config/supervisord.conf:/etc/supervisord.conf
      - ./config/supervisor.d:/etc/supervisor.d
      - ./startup.sh:/startup.sh
    
    exposed_ports:
      - 8000  # Django dev server
      - 5432  # PostgreSQL (optional external access)
    
    packages:
      - postgresql
      - postgresql-client
      - python3
      - py3-pip
      - python3-dev
      - gcc
      - musl-dev
      - linux-headers
      - postgresql-dev
      - build-base
      - libffi-dev
      - supervisor
    
    # Note: Environment variables from .env are automatically available
    
    post_install:
      - name: "Setup PostgreSQL"
        command: |
          # Initialize PostgreSQL
          mkdir -p /run/postgresql
          chown postgres:postgres /run/postgresql
          su postgres -c "initdb -D /var/lib/postgresql/data"
          
          # Configure PostgreSQL
          echo "host all all 127.0.0.1/32 md5" >> /var/lib/postgresql/data/pg_hba.conf
          echo "host all all 10.0.3.0/24 md5" >> /var/lib/postgresql/data/pg_hba.conf
          echo "listen_addresses = '*'" >> /var/lib/postgresql/data/postgresql.conf
          
          # Start PostgreSQL
          su postgres -c "pg_ctl -D /var/lib/postgresql/data -l /var/lib/postgresql/logfile start"
          sleep 5
          
          # Create database and user (using env vars from .env)
          su postgres -c "createdb ${DB_NAME}"
          su postgres -c "psql -c \"CREATE USER ${DB_USER} WITH PASSWORD '${DB_PASSWORD}';\""
          su postgres -c "psql -c \"GRANT ALL PRIVILEGES ON DATABASE ${DB_NAME} TO ${DB_USER};\""
          # PostgreSQL 15+ requires explicit schema permissions
          su postgres -c "psql -d ${DB_NAME} -c \"GRANT ALL ON SCHEMA public TO ${DB_USER};\""
      
      - name: "Setup Python environment"
        command: |
          cd /app
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: "Run migrations"
        command: |
          # Ensure PostgreSQL is running
          su postgres -c "pg_ctl -D /var/lib/postgresql/data -l /var/lib/postgresql/logfile start" || true
          sleep 3
          
          cd /app/src
          source ../venv/bin/activate
          # Environment variables are already available from .env
          python manage.py migrate
          python manage.py collectstatic --noinput || true
      
      - name: "Create superuser"
        command: |
          cd /app/src
          source ../venv/bin/activate
          # Using env vars from .env
          # Try to create superuser, but don't fail if tables don't exist yet
          python manage.py createsuperuser --noinput --username ${ADMIN_USER} --email ${ADMIN_EMAIL} 2>/dev/null || true
          # Set password if user exists
          echo "from django.contrib.auth import get_user_model; User = get_user_model(); u = User.objects.filter(username='${ADMIN_USER}').first(); u and u.set_password('${ADMIN_PASSWORD}'); u and u.save()" | python manage.py shell 2>/dev/null || true
      
      - name: "Verify supervisor configuration"
        command: |
          # Just ensure the startup script is executable
          chmod +x /startup.sh
          # Log config file locations for debugging
          echo "Supervisor config files mounted:"
          ls -la /etc/supervisord.conf
          ls -la /etc/supervisor.d/