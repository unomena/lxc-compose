# Django + Celery Application with PostgreSQL and Redis
# Multi-container setup with proper dependencies

version: "1.0"

containers:
  sample-datastore:
    template: alpine
    release: "3.19"

    packages:
      - postgresql
      - postgresql-client
      - redis

    exposed_ports:
      - 5432 # PostgreSQL
      - 6379 # Redis

    mounts:
      - ./config/sample-datastore/redis.conf:/etc/redis.conf

    logs:
      - postgres:/var/lib/postgresql/logfile
      - redis:/var/log/redis/redis.log
    
    tests:
      internal:
        - health:/app/tests/internal_tests.sh
      external:
        - health:/app/tests/external_tests.sh

    post_install:
      - name: "Setup PostgreSQL"
        command: |
          # Create PostgreSQL directories with proper ownership
          mkdir -p /run/postgresql
          mkdir -p /var/lib/postgresql/data
          chown -R postgres:postgres /run/postgresql
          chown -R postgres:postgres /var/lib/postgresql

          # Initialize PostgreSQL
          su postgres -c "initdb -D /var/lib/postgresql/data"

          # Configure PostgreSQL
          echo "host all all 0.0.0.0/0 md5" >> /var/lib/postgresql/data/pg_hba.conf
          echo "listen_addresses = '*'" >> /var/lib/postgresql/data/postgresql.conf

          # Start PostgreSQL temporarily for setup
          su postgres -c "pg_ctl -D /var/lib/postgresql/data -l /var/lib/postgresql/logfile start"
          sleep 5

          # Create database and user (using env vars from .env)
          su postgres -c "createdb ${DB_NAME}"
          su postgres -c "psql -c \"CREATE USER ${DB_USER} WITH PASSWORD '${DB_PASSWORD}';\""
          su postgres -c "psql -c \"GRANT ALL PRIVILEGES ON DATABASE ${DB_NAME} TO ${DB_USER};\""
          su postgres -c "psql -d ${DB_NAME} -c \"GRANT ALL ON SCHEMA public TO ${DB_USER};\""

          # Stop PostgreSQL to restart it as a daemon
          su postgres -c "pg_ctl -D /var/lib/postgresql/data stop"

      - name: "Start PostgreSQL"
        command: |
          # Start PostgreSQL as a daemon
          su postgres -c "pg_ctl -D /var/lib/postgresql/data -l /var/lib/postgresql/logfile start"
          # Verify it's running
          sleep 2
          su postgres -c "pg_ctl -D /var/lib/postgresql/data status" || true

      - name: "Setup Redis"
        command: |
          # Create Redis directories with proper ownership
          mkdir -p /var/lib/redis
          mkdir -p /var/log/redis
          mkdir -p /run/redis

          # Create redis user if it doesn't exist
          adduser -D -H -s /sbin/nologin redis 2>/dev/null || true

          chown -R redis:redis /var/lib/redis
          chown -R redis:redis /var/log/redis
          chown -R redis:redis /run/redis

          # Set permissions on redis config
          chmod 644 /etc/redis.conf

      - name: "Start Redis"
        command: |
          # Start Redis directly (OpenRC might not work properly in LXC)
          /usr/bin/redis-server /etc/redis.conf --daemonize yes

  sample-django-app:
    template: ubuntu-minimal
    release: lts

    # Dependencies must exist before this container can start
    depends_on:
      - sample-datastore

    mounts:
      - .:/app
      - ./config/sample-django-app/supervisord.conf:/etc/supervisord.conf
      - ./config/sample-django-app/nginx.conf:/etc/nginx/sites-available/django-app

    exposed_ports:
      - 80 # Nginx (serves Django app)

    logs:
      - django:/var/log/django/django.log
      - django-error:/var/log/django/django_err.log
      - celery:/var/log/celery/celery.log
      - celery-error:/var/log/celery/celery_err.log
      - celery-beat:/var/log/celery/celery-beat.log
      - celery-beat-error:/var/log/celery/celery-beat_err.log
      - nginx:/var/log/nginx/access.log
      - nginx-error:/var/log/nginx/error.log
      - supervisor:/var/log/supervisord.log
    
    tests:
      internal:
        - health:/app/tests/internal_tests.sh
      external:
        - health:/app/tests/external_tests.sh

    packages:
      - python3
      - python3-pip
      - python3-venv
      - python3-dev
      - build-essential
      - libpq-dev
      - nginx
      - supervisor
      - git
      - redis-tools
      - postgresql-client
      - curl

    # Note: Environment variables from .env are automatically available

    services:
      django:
        command: /app/venv/bin/python /app/src/manage.py runserver 0.0.0.0:8000
        directory: /app/src
        user: www-data
        autostart: true
        autorestart: true
        stdout_logfile: /var/log/django/django.log
        stderr_logfile: /var/log/django/django_err.log
        startsecs: 10
        stopwaitsecs: 600

      celery:
        command: /app/venv/bin/celery -A config worker -l info
        directory: /app/src
        user: www-data
        autostart: true
        autorestart: true
        stdout_logfile: /var/log/celery/celery.log
        stderr_logfile: /var/log/celery/celery_err.log
        startsecs: 10
        stopwaitsecs: 600

      celery-beat:
        command: /app/venv/bin/celery -A config beat -l info
        directory: /app/src
        user: www-data
        autostart: true
        autorestart: true
        stdout_logfile: /var/log/celery/celery-beat.log
        stderr_logfile: /var/log/celery/celery-beat_err.log
        startsecs: 10
        stopwaitsecs: 600

    post_install:
      - name: "Create directories"
        command: |
          mkdir -p /var/log/django /var/log/celery /run/django
          mkdir -p /app/static /app/media
          mkdir -p /var/log/nginx

      - name: "Setup Python environment"
        command: |
          cd /app
          python3 -m venv venv
          ./venv/bin/pip install --upgrade pip setuptools wheel
          ./venv/bin/pip install -r requirements.txt

      - name: "Run migrations"
        command: |
          cd /app/src
          # Wait for PostgreSQL to be ready
          echo "Waiting for PostgreSQL to be ready..."
          for i in $(seq 1 30); do
            if PGPASSWORD=${DB_PASSWORD} psql -h ${DB_HOST} -U ${DB_USER} -d ${DB_NAME} -c "SELECT 1" > /dev/null 2>&1; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for PostgreSQL... (attempt $i/30)"
            sleep 2
          done
          # Environment variables are already available from .env
          ../venv/bin/python manage.py makemigrations api tasks
          ../venv/bin/python manage.py migrate
          ../venv/bin/python manage.py collectstatic --noinput

      - name: "Create superuser"
        command: |
          cd /app/src
          # Using env vars from .env
          ../venv/bin/python manage.py createsuperuser --noinput --username ${ADMIN_USER} --email ${ADMIN_EMAIL} || true
          echo "from django.contrib.auth import get_user_model; User = get_user_model(); u = User.objects.get(username='${ADMIN_USER}'); u.set_password('${ADMIN_PASSWORD}'); u.save()" | ../venv/bin/python manage.py shell

      - name: "Set permissions"
        command: |
          # Create www-data user if it doesn't exist
          id -u www-data &>/dev/null || useradd -r -s /bin/false www-data
          chown -R www-data:www-data /app
          chmod -R 755 /app
          chmod -R 775 /app/media /app/static /var/log/django /var/log/celery

      - name: "Start Supervisor service"
        command: |
          # Start supervisord directly (systemd doesn't work properly in LXC)
          /usr/bin/supervisord -c /etc/supervisord.conf
          # Give it a moment to start
          sleep 5
          # Check status
          supervisorctl status
          # Wait a bit more for Django to start
          sleep 5
          # Test if Django is responding
          curl -I http://127.0.0.1:8000 || echo "Django not responding yet"
          # Wait for Django to be ready
          echo "Waiting for Django to be ready..."
          for i in $(seq 1 30); do
            if curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8000 | grep -q "200\|301\|302"; then
              echo "Django is ready!"
              break
            fi
            echo "Waiting for Django... (attempt $i/30)"
            sleep 2
          done

      - name: "Setup Nginx"
        command: |
          # Enable the Django site
          ln -sf /etc/nginx/sites-available/django-app /etc/nginx/sites-enabled/
          rm -f /etc/nginx/sites-enabled/default
          # Test config
          nginx -t
          # Stop nginx if running (might have started during package install)
          service nginx stop || true
          # Start nginx with our config
          service nginx start
          # Verify it's running
          sleep 2
          service nginx status || true
