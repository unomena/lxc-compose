# Django + Celery Application with PostgreSQL and Redis
# Multi-container setup using library services via includes
#
# This version uses the template inheritance system to include
# pre-configured PostgreSQL and Redis services instead of manual setup

version: "1.0"

containers:
  sample-django-celery-app-datastore:
    template: alpine-3.19  # Use Alpine for minimal footprint
    
    # Include pre-configured services from library
    includes:
      - postgresql  # Includes PostgreSQL with all setup
      - redis       # Includes Redis with all setup
    
    # Environment variables are loaded from .env file automatically
    # No need to duplicate them here
    
    # The includes already provide:
    # - All necessary packages
    # - Exposed ports (5432 for PostgreSQL, 6379 for Redis)
    # - Service setup and initialization
    # - Log configurations
    # - Health check tests
    
    # Additional configuration for Django-specific setup
    post_install:
      - name: "Configure PostgreSQL for Django"
        command: |
          # Wait for PostgreSQL to start (from included service)
          sleep 5
          
          # Create Django database user if different from postgres
          if [ "${DB_USER}" != "postgres" ]; then
            su postgres -c "psql -c \"CREATE USER ${DB_USER} WITH PASSWORD '${DB_PASSWORD}';\"" || true
            su postgres -c "psql -c \"GRANT ALL PRIVILEGES ON DATABASE ${DB_NAME} TO ${DB_USER};\"" || true
            su postgres -c "psql -d ${DB_NAME} -c \"GRANT ALL ON SCHEMA public TO ${DB_USER};\"" || true
          fi
          
          # Add any Django-specific extensions
          su postgres -c "psql -d ${DB_NAME} -c 'CREATE EXTENSION IF NOT EXISTS pg_trgm;'" || true

  sample-django-celery-app:
    template: ubuntu-minimal-lts  # Use latest Ubuntu minimal
    
    # Include pre-configured services
    includes:
      - python3  # Includes Python3 with pip, venv, build tools
    #   - nginx  # Optional: for serving static files
    
    # Dependencies must exist before this container can start
    depends_on:
      - sample-django-celery-app-datastore

    mounts:
      - .:/app

    exposed_ports:
      - 8000 # Django development server

    logs:
      - django:/var/log/django/django.log
      - django-error:/var/log/django/django_err.log
      - celery:/var/log/celery/celery.log
      - celery-error:/var/log/celery/celery_err.log
      - celery-beat:/var/log/celery/celery-beat.log
      - celery-beat-error:/var/log/celery/celery-beat_err.log
    
    tests:
      internal:
        - health:/app/tests/app_internal_tests.sh
      external:
        - health:/app/tests/external_tests.sh
      port_forwarding:
        - iptables:/app/tests/port_forwarding_tests.sh

    packages:
      # Only packages not provided by python3 or supervisor includes
      - libpq-dev       # For psycopg2
      - redis-tools     # For Redis CLI
      - postgresql-client  # For psql CLI
      - curl            # For testing

    # Services are automatically wrapped with load-env.sh for environment inheritance
    # Supervisor is auto-included and configured for auto-start
    services:
      django:
        command: /app/venv/bin/python /app/src/manage.py runserver 0.0.0.0:8000
        directory: /app/src
        autostart: true
        autorestart: true
        stdout_logfile: /var/log/django/django.log
        stderr_logfile: /var/log/django/django_err.log
        environment: PYTHONUNBUFFERED=1,DJANGO_SETTINGS_MODULE=config.settings
        startsecs: 10
        stopwaitsecs: 600

      celery:
        command: /app/venv/bin/celery -A config worker -l info
        directory: /app/src
        autostart: true
        autorestart: true
        stdout_logfile: /var/log/celery/celery.log
        stderr_logfile: /var/log/celery/celery_err.log
        environment: PYTHONUNBUFFERED=1
        startsecs: 10
        stopwaitsecs: 600

      celery-beat:
        command: /app/venv/bin/celery -A config beat -l info
        directory: /app/src
        autostart: true
        autorestart: true
        stdout_logfile: /var/log/celery/celery-beat.log
        stderr_logfile: /var/log/celery/celery-beat_err.log
        environment: PYTHONUNBUFFERED=1
        startsecs: 10
        stopwaitsecs: 600

    post_install:
      - name: "Create directories"
        command: |
          mkdir -p /var/log/django /var/log/celery /run/django
          mkdir -p /app/static /app/media

      - name: "Setup Python environment"
        command: |
          cd /app
          python3 -m venv venv
          ./venv/bin/pip install --upgrade pip setuptools wheel
          ./venv/bin/pip install -r requirements.txt

      - name: "Run migrations"
        command: |
          cd /app/src
          # Wait for PostgreSQL to be ready
          echo "Waiting for PostgreSQL to be ready..."
          for i in $(seq 1 30); do
            if PGPASSWORD=${DB_PASSWORD} psql -h ${DB_HOST} -U ${DB_USER} -d ${DB_NAME} -c "SELECT 1" > /dev/null 2>&1; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for PostgreSQL... (attempt $i/30)"
            sleep 2
          done
          # Environment variables are already available from .env
          ../venv/bin/python manage.py makemigrations api tasks
          ../venv/bin/python manage.py migrate
          ../venv/bin/python manage.py collectstatic --noinput

      - name: "Create superuser"
        command: |
          cd /app/src
          # Using env vars from .env
          ../venv/bin/python manage.py createsuperuser --noinput --username ${ADMIN_USER} --email ${ADMIN_EMAIL} || true
          echo "from django.contrib.auth import get_user_model; User = get_user_model(); u = User.objects.get(username='${ADMIN_USER}'); u.set_password('${ADMIN_PASSWORD}'); u.save()" | ../venv/bin/python manage.py shell

      - name: "Set permissions"
        command: |
          # Create www-data user if it doesn't exist
          id -u www-data &>/dev/null || useradd -r -s /bin/false www-data
          chown -R www-data:www-data /app
          chmod -R 755 /app
          chmod -R 775 /app/media /app/static /var/log/django /var/log/celery

      - name: "Start Supervisor service"
        command: |
          # Start supervisord directly (systemd doesn't work properly in LXC)
          /usr/bin/supervisord -c /etc/supervisord.conf
          # Give it a moment to start
          sleep 5
          # Check status
          supervisorctl status
          # Wait a bit more for Django to start
          sleep 5
          # Test if Django is responding
          curl -I http://127.0.0.1:8000 || echo "Django not responding yet"
          # Wait for Django to be ready
          echo "Waiting for Django to be ready..."
          for i in $(seq 1 30); do
            if curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8000 | grep -q "200\|301\|302"; then
              echo "Django is ready!"
              break
            fi
            echo "Waiting for Django... (attempt $i/30)"
            sleep 2
          done