# Standalone PostgreSQL Server
# A dedicated PostgreSQL instance for shared use across multiple applications
# Perfect for development, testing, and QA environments

version: '1.0'

containers:
  postgresql-server:
    template: alpine
    release: "3.19"
    
    # PostgreSQL port - accessible from other containers and optionally from host
    exposed_ports:
      - 5432
    
    # Mount configuration files
    mounts:
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./config/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./config/init-scripts:/docker-entrypoint-initdb.d
      # Data persistence - uncomment to persist data between container rebuilds
      # - ./data:/var/lib/postgresql/data
    
    # PostgreSQL and utilities
    packages:
      - postgresql
      - postgresql-client
      - postgresql-contrib
    
    # Log files
    logs:
      - postgresql:/var/lib/postgresql/logfile
      - postgresql-slow:/var/lib/postgresql/slow_queries.log
    
    # Health checks and tests
    tests:
      internal:
        - health:/tests/internal_tests.sh
      external:
        - connectivity:/tests/external_tests.sh
      port_forwarding:
        - ports:/tests/port_forwarding_tests.sh
    
    # PostgreSQL setup and initialization
    post_install:
      - name: "Setup PostgreSQL directories"
        command: |
          # Create required directories with proper ownership
          mkdir -p /run/postgresql
          mkdir -p /var/lib/postgresql/data
          mkdir -p /etc/postgresql
          chown -R postgres:postgres /run/postgresql
          chown -R postgres:postgres /var/lib/postgresql
          chown -R postgres:postgres /etc/postgresql
      
      - name: "Initialize PostgreSQL cluster"
        command: |
          # Initialize the database cluster
          su postgres -c "initdb -D /var/lib/postgresql/data --encoding=UTF8 --locale=C"
          
          # Copy custom configuration if provided
          if [ -f /etc/postgresql/postgresql.conf ]; then
            cp /etc/postgresql/postgresql.conf /var/lib/postgresql/data/
          fi
          
          if [ -f /etc/postgresql/pg_hba.conf ]; then
            cp /etc/postgresql/pg_hba.conf /var/lib/postgresql/data/
          else
            # Default configuration for development
            echo "# Allow connections from any container" >> /var/lib/postgresql/data/pg_hba.conf
            echo "host    all             all             0.0.0.0/0               md5" >> /var/lib/postgresql/data/pg_hba.conf
            echo "host    all             all             ::/0                    md5" >> /var/lib/postgresql/data/pg_hba.conf
          fi
          
          # Configure PostgreSQL to listen on all interfaces
          echo "listen_addresses = '*'" >> /var/lib/postgresql/data/postgresql.conf
          echo "port = 5432" >> /var/lib/postgresql/data/postgresql.conf
          echo "max_connections = 200" >> /var/lib/postgresql/data/postgresql.conf
          echo "shared_buffers = 256MB" >> /var/lib/postgresql/data/postgresql.conf
          echo "effective_cache_size = 1GB" >> /var/lib/postgresql/data/postgresql.conf
          echo "maintenance_work_mem = 64MB" >> /var/lib/postgresql/data/postgresql.conf
          echo "checkpoint_completion_target = 0.9" >> /var/lib/postgresql/data/postgresql.conf
          echo "wal_buffers = 16MB" >> /var/lib/postgresql/data/postgresql.conf
          echo "default_statistics_target = 100" >> /var/lib/postgresql/data/postgresql.conf
          echo "random_page_cost = 1.1" >> /var/lib/postgresql/data/postgresql.conf
          echo "effective_io_concurrency = 200" >> /var/lib/postgresql/data/postgresql.conf
          echo "work_mem = 4MB" >> /var/lib/postgresql/data/postgresql.conf
          echo "min_wal_size = 1GB" >> /var/lib/postgresql/data/postgresql.conf
          echo "max_wal_size = 4GB" >> /var/lib/postgresql/data/postgresql.conf
      
      - name: "Start PostgreSQL temporarily for setup"
        command: |
          # Start PostgreSQL for initial setup
          su postgres -c "pg_ctl -D /var/lib/postgresql/data -l /var/lib/postgresql/logfile start"
          sleep 5
          
          # Verify PostgreSQL is running
          su postgres -c "pg_ctl -D /var/lib/postgresql/data status"
      
      - name: "Create default superuser"
        command: |
          # Create a superuser for administration (password from .env or default)
          POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
          su postgres -c "psql -c \"ALTER USER postgres PASSWORD '$POSTGRES_PASSWORD';\""
          
          # Create additional superuser if specified
          if [ -n "${ADMIN_USER}" ]; then
            su postgres -c "psql -c \"CREATE USER ${ADMIN_USER} WITH SUPERUSER PASSWORD '${ADMIN_PASSWORD:-admin}';\""
          fi
      
      - name: "Create default databases"
        command: |
          # Create databases specified in environment variables
          # Example: DATABASES="app1_dev app1_test app2_dev app2_test"
          if [ -n "${DATABASES}" ]; then
            for db in ${DATABASES}; do
              echo "Creating database: $db"
              su postgres -c "createdb $db"
            done
          fi
          
          # Create default development database
          su postgres -c "createdb development" || true
          su postgres -c "createdb testing" || true
          su postgres -c "createdb production" || true
      
      - name: "Create application users"
        command: |
          # Create application-specific users
          # Example: APP_USERS="app1:password1 app2:password2"
          if [ -n "${APP_USERS}" ]; then
            IFS=' '
            for user_pass in ${APP_USERS}; do
              user=$(echo $user_pass | cut -d: -f1)
              pass=$(echo $user_pass | cut -d: -f2)
              echo "Creating user: $user"
              su postgres -c "psql -c \"CREATE USER $user WITH PASSWORD '$pass';\""
              
              # Grant permissions on user's databases
              su postgres -c "psql -c \"GRANT ALL PRIVILEGES ON DATABASE ${user}_dev TO $user;\"" || true
              su postgres -c "psql -c \"GRANT ALL PRIVILEGES ON DATABASE ${user}_test TO $user;\"" || true
              su postgres -c "psql -c \"GRANT ALL PRIVILEGES ON DATABASE ${user}_prod TO $user;\"" || true
            done
          fi
          
          # Create default application user
          DEFAULT_APP_USER=${DEFAULT_APP_USER:-appuser}
          DEFAULT_APP_PASSWORD=${DEFAULT_APP_PASSWORD:-apppassword}
          su postgres -c "psql -c \"CREATE USER $DEFAULT_APP_USER WITH PASSWORD '$DEFAULT_APP_PASSWORD';\"" || true
          su postgres -c "psql -c \"GRANT ALL PRIVILEGES ON DATABASE development TO $DEFAULT_APP_USER;\"" || true
          su postgres -c "psql -c \"GRANT ALL PRIVILEGES ON DATABASE testing TO $DEFAULT_APP_USER;\"" || true
      
      - name: "Run initialization scripts"
        command: |
          # Run any SQL scripts in the init-scripts directory
          if [ -d /docker-entrypoint-initdb.d ] && [ "$(ls -A /docker-entrypoint-initdb.d 2>/dev/null)" ]; then
            for script in /docker-entrypoint-initdb.d/*.sql; do
              if [ -f "$script" ]; then
                echo "Running initialization script: $script"
                su postgres -c "psql -f $script"
              fi
            done
            
            for script in /docker-entrypoint-initdb.d/*.sh; do
              if [ -f "$script" ]; then
                echo "Running initialization script: $script"
                chmod +x "$script"
                su postgres -c "$script"
              fi
            done
          fi
      
      - name: "Configure PostgreSQL for production"
        command: |
          # Stop PostgreSQL to restart with final configuration
          su postgres -c "pg_ctl -D /var/lib/postgresql/data stop"
          sleep 2
          
          # Add logging configuration
          echo "" >> /var/lib/postgresql/data/postgresql.conf
          echo "# Logging" >> /var/lib/postgresql/data/postgresql.conf
          echo "logging_collector = on" >> /var/lib/postgresql/data/postgresql.conf
          echo "log_directory = '/var/lib/postgresql'" >> /var/lib/postgresql/data/postgresql.conf
          echo "log_filename = 'postgresql-%Y-%m-%d.log'" >> /var/lib/postgresql/data/postgresql.conf
          echo "log_file_mode = 0640" >> /var/lib/postgresql/data/postgresql.conf
          echo "log_rotation_age = 1d" >> /var/lib/postgresql/data/postgresql.conf
          echo "log_rotation_size = 100MB" >> /var/lib/postgresql/data/postgresql.conf
          echo "log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '" >> /var/lib/postgresql/data/postgresql.conf
          echo "log_checkpoints = on" >> /var/lib/postgresql/data/postgresql.conf
          echo "log_connections = on" >> /var/lib/postgresql/data/postgresql.conf
          echo "log_disconnections = on" >> /var/lib/postgresql/data/postgresql.conf
          echo "log_duration = off" >> /var/lib/postgresql/data/postgresql.conf
          echo "log_error_verbosity = default" >> /var/lib/postgresql/data/postgresql.conf
          echo "log_hostname = on" >> /var/lib/postgresql/data/postgresql.conf
          echo "log_lock_waits = on" >> /var/lib/postgresql/data/postgresql.conf
          echo "log_statement = 'all'" >> /var/lib/postgresql/data/postgresql.conf
          echo "log_temp_files = 0" >> /var/lib/postgresql/data/postgresql.conf
          echo "log_timezone = 'UTC'" >> /var/lib/postgresql/data/postgresql.conf
          echo "" >> /var/lib/postgresql/data/postgresql.conf
          echo "# Performance logging" >> /var/lib/postgresql/data/postgresql.conf
          echo "log_min_duration_statement = 1000" >> /var/lib/postgresql/data/postgresql.conf
      
      - name: "Start PostgreSQL service"
        command: |
          # Start PostgreSQL as a service
          su postgres -c "pg_ctl -D /var/lib/postgresql/data -l /var/lib/postgresql/logfile start"
          
          # Wait for PostgreSQL to be ready
          for i in $(seq 1 30); do
            if su postgres -c "pg_isready"; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for PostgreSQL... (attempt $i/30)"
            sleep 2
          done
          
          # Show final status
          su postgres -c "pg_ctl -D /var/lib/postgresql/data status"
          
          # List databases and users
          echo "Available databases:"
          su postgres -c "psql -l"
          
          echo "Available users:"
          su postgres -c "psql -c '\du'"