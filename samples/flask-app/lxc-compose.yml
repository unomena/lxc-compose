# Minimal Flask Application with Redis - Single Alpine Container
# Ultra-lightweight setup with Redis and Flask in one container

version: '1.0'

containers:
  sample-flask-app:
    template: alpine
    release: "3.19"
    
    mounts:
      - .:/app
      - ./config/supervisord.conf:/etc/supervisord.conf
      - ./config/supervisor.d:/etc/supervisor.d
      - ./startup.sh:/startup.sh
    
    exposed_ports:
      - 5000  # Flask app
      - 6379  # Redis (optional external access)
    
    packages:
      - redis
      - python3
      - py3-pip
      - python3-dev
      - gcc
      - musl-dev
      - linux-headers
      - build-base
      - libffi-dev
      - supervisor
    
    # Note: Environment variables from .env are automatically available
    
    post_install:
      - name: "Setup Redis"
        command: |
          # Create Redis directories with proper ownership
          mkdir -p /var/lib/redis
          mkdir -p /var/log/redis
          mkdir -p /run/redis
          
          # Create redis user if it doesn't exist
          adduser -D -H -s /sbin/nologin redis 2>/dev/null || true
          
          chown -R redis:redis /var/lib/redis
          chown -R redis:redis /var/log/redis
          chown -R redis:redis /run/redis
          
          # Configure Redis
          cat > /etc/redis.conf << 'EOF'
          bind 0.0.0.0
          protected-mode no
          port 6379
          dir /var/lib/redis
          logfile /var/log/redis/redis.log
          pidfile /run/redis/redis.pid
          daemonize no
          EOF
          
          chown redis:redis /etc/redis.conf
      
      - name: "Setup Python environment"
        command: |
          cd /app
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: "Create directories"
        command: |
          mkdir -p /var/log
          chmod 755 /var/log
      
      - name: "Start services with Supervisor"
        command: |
          # Ensure the startup script is executable
          chmod +x /startup.sh
          # Start supervisord in the background
          /usr/bin/supervisord -c /etc/supervisord.conf
          # Give it a moment to start
          sleep 5
          # Check status
          supervisorctl status