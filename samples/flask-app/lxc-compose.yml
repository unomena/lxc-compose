# Flask Application with Redis
# Multi-container setup following project standards

version: '1.0'

containers:
  sample-flask-datastore:
    image: images:alpine/3.19
    
    packages:
      - redis

    exposed_ports:
      - 6379    # Redis
    
    logs:
      - redis:/var/log/redis/redis.log
    
    tests:
      internal:
        - health:/app/tests/internal_tests.sh
      external:
        - health:/app/tests/external_tests.sh
      port_forwarding:
        - iptables:/app/tests/port_forwarding_tests.sh
    
    mounts:
      - ./config/sample-flask-datastore/redis.conf:/etc/redis.conf
    
    post_install:
      - name: "Setup Redis"
        command: |
          # Create Redis directories with proper ownership
          mkdir -p /var/lib/redis
          mkdir -p /var/log/redis
          mkdir -p /run/redis
          
          # Create redis user if it doesn't exist
          adduser -D -H -s /sbin/nologin redis 2>/dev/null || true
          
          chown -R redis:redis /var/lib/redis
          chown -R redis:redis /var/log/redis
          chown -R redis:redis /run/redis
          
          # Set permissions on redis config
          chmod 644 /etc/redis.conf

      - name: "Start Redis"
        command: |
          # Start Redis directly (OpenRC might not work properly in LXC)
          /usr/bin/redis-server /etc/redis.conf --daemonize yes
          # Verify it's running
          sleep 2
          redis-cli ping || echo "Redis not responding yet"

  sample-flask-app:
    image: images:alpine/3.19
    
    # Dependencies must exist before this container can start
    depends_on:
      - sample-flask-datastore
    
    mounts:
      - .:/app
      - ./config/sample-flask-app/supervisord.conf:/etc/supervisord.conf
    
    exposed_ports:
      - 5000    # Flask app port
    
    logs:
      - flask:/var/log/flask.log
      - flask-error:/var/log/flask_err.log
      - supervisor:/var/log/supervisord.log
    
    tests:
      internal:
        - health:/app/tests/internal_tests.sh
      external:
        - health:/app/tests/external_tests.sh
      port_forwarding:
        - iptables:/app/tests/port_forwarding_tests.sh
    
    packages:
      - python3
      - py3-pip
      - supervisor
      - redis
      - curl
      - gcc
      - musl-dev
      - python3-dev
    
    # Note: Environment variables from .env are automatically available
    
    services:
      flask:
        command: /app/venv/bin/python /app/app.py
        directory: /app
        user: www-data
        autostart: true
        autorestart: true
        priority: 20
        stdout_logfile: /var/log/flask.log
        stderr_logfile: /var/log/flask_err.log
        startsecs: 10
        stopwaitsecs: 600
    
    post_install:
      - name: "Setup Python environment"
        command: |
          cd /app
          python3 -m venv venv
          ./venv/bin/pip install --upgrade pip setuptools wheel
          ./venv/bin/pip install -r requirements.txt
      
      - name: "Create directories"
        command: |
          mkdir -p /var/log
          chmod 755 /var/log
      
      - name: "Wait for Redis"
        command: |
          # Wait for Redis to be ready
          echo "Waiting for Redis to be ready..."
          for i in $(seq 1 30); do
            if redis-cli -h ${REDIS_HOST} ping > /dev/null 2>&1; then
              echo "Redis is ready!"
              break
            fi
            echo "Waiting for Redis... (attempt $i/30)"
            sleep 2
          done
      
      - name: "Set permissions"
        command: |
          # Create www-data user if it doesn't exist (Alpine way)
          addgroup -S www-data 2>/dev/null || true
          adduser -S -D -H -s /sbin/nologin -G www-data www-data 2>/dev/null || true
          chown -R www-data:www-data /app
          chmod -R 755 /app
      
      - name: "Start Supervisor service"
        command: |
          # Start supervisord directly
          /usr/bin/supervisord -c /etc/supervisord.conf
          # Give it a moment to start
          sleep 5
          # Check status
          supervisorctl status
          # Wait a bit more for Flask to start
          sleep 5
          # Test if Flask is responding
          curl -I http://127.0.0.1:5000 || echo "Flask not responding yet"
          # Wait for Flask to be ready
          echo "Waiting for Flask to be ready..."
          for i in $(seq 1 30); do
            if curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:5000 | grep -q "200\|301\|302"; then
              echo "Flask is ready!"
              break
            fi
            echo "Waiting for Flask... (attempt $i/30)"
            sleep 2
          done
      
