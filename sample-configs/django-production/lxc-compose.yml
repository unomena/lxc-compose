# Django Production Setup - Ubuntu Minimal
# Production-ready with Gunicorn, Celery, Nginx, PostgreSQL, Redis

containers:
  # Database and cache server
  - name: datastore
    image: ubuntu-minimal:22.04
    ports:
      - "5434:5432"  # PostgreSQL
      - "6381:6379"  # Redis
    mounts:
      - ./data/postgres:/var/lib/postgresql
      - ./data/redis:/var/lib/redis
    services:
      - name: database-services
        type: systemd
        command: |
          apt-get update
          apt-get install -y postgresql redis-server
          
          # PostgreSQL configuration
          cat >> /etc/postgresql/14/main/postgresql.conf << 'EOF'
          listen_addresses = '*'
          max_connections = 200
          shared_buffers = 256MB
          effective_cache_size = 1GB
          maintenance_work_mem = 64MB
          EOF
          
          echo 'host all all 10.0.3.0/24 md5' >> /etc/postgresql/14/main/pg_hba.conf
          systemctl restart postgresql
          
          # Create database
          sudo -u postgres psql -c "CREATE DATABASE django_prod;"
          sudo -u postgres psql -c "CREATE USER django_user WITH PASSWORD 'secure_password_here';"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE django_prod TO django_user;"
          
          # Redis configuration for production
          cat >> /etc/redis/redis.conf << 'EOF'
          bind 0.0.0.0
          protected-mode no
          maxmemory 256mb
          maxmemory-policy allkeys-lru
          EOF
          
          systemctl restart redis-server

  # Django application with Gunicorn
  - name: app
    image: ubuntu-minimal:22.04
    ports:
      - "80:80"      # Nginx
      - "443:443"    # Nginx HTTPS
    mounts:
      - ./django-project:/app
      - ./logs:/var/log/django
    services:
      - name: django-production
        type: systemd
        command: |
          apt-get update
          apt-get install -y python3 python3-pip python3-venv \
            nginx supervisor postgresql-client \
            build-essential python3-dev libpq-dev
          
          # Create app user
          useradd -m -s /bin/bash django
          
          # Setup Python environment
          cd /app
          python3 -m venv venv
          . venv/bin/activate
          pip install --upgrade pip
          pip install django psycopg2 redis celery gunicorn whitenoise django-environ
          
          # Create production settings if needed
          if [ ! -f myproject/settings_production.py ]; then
            cat > myproject/settings_production.py << 'EOF'
          from .settings import *
          import environ
          
          env = environ.Env()
          
          DEBUG = False
          ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['*'])
          
          DATABASES = {
              'default': {
                  'ENGINE': 'django.db.backends.postgresql',
                  'NAME': env('DB_NAME', default='django_prod'),
                  'USER': env('DB_USER', default='django_user'),
                  'PASSWORD': env('DB_PASSWORD', default='secure_password_here'),
                  'HOST': env('DB_HOST', default='datastore'),
                  'PORT': env('DB_PORT', default='5432'),
              }
          }
          
          CACHES = {
              'default': {
                  'BACKEND': 'django.core.cache.backends.redis.RedisCache',
                  'LOCATION': env('REDIS_URL', default='redis://datastore:6379/1'),
              }
          }
          
          CELERY_BROKER_URL = env('CELERY_BROKER_URL', default='redis://datastore:6379/0')
          CELERY_RESULT_BACKEND = env('CELERY_RESULT_BACKEND', default='redis://datastore:6379/0')
          
          STATIC_ROOT = '/app/static'
          MEDIA_ROOT = '/app/media'
          
          # Security settings
          SECURE_SSL_REDIRECT = env.bool('SECURE_SSL_REDIRECT', default=False)
          SESSION_COOKIE_SECURE = env.bool('SESSION_COOKIE_SECURE', default=False)
          CSRF_COOKIE_SECURE = env.bool('CSRF_COOKIE_SECURE', default=False)
          EOF
          fi
          
          # Create Gunicorn config
          cat > /app/gunicorn_config.py << 'EOF'
          bind = "127.0.0.1:8000"
          workers = 4
          worker_class = "sync"
          worker_connections = 1000
          max_requests = 1000
          max_requests_jitter = 50
          timeout = 30
          keepalive = 2
          accesslog = "/var/log/django/gunicorn_access.log"
          errorlog = "/var/log/django/gunicorn_error.log"
          loglevel = "info"
          EOF
          
          # Create supervisor config
          cat > /etc/supervisor/conf.d/django.conf << 'EOF'
          [program:gunicorn]
          command=/app/venv/bin/gunicorn myproject.wsgi:application -c /app/gunicorn_config.py
          directory=/app
          user=django
          autostart=true
          autorestart=true
          redirect_stderr=true
          stdout_logfile=/var/log/django/gunicorn.log
          environment=DJANGO_SETTINGS_MODULE="myproject.settings_production"
          
          [program:celery]
          command=/app/venv/bin/celery -A myproject worker -l info
          directory=/app
          user=django
          autostart=true
          autorestart=true
          redirect_stderr=true
          stdout_logfile=/var/log/django/celery.log
          environment=DJANGO_SETTINGS_MODULE="myproject.settings_production"
          
          [program:celery-beat]
          command=/app/venv/bin/celery -A myproject beat -l info
          directory=/app
          user=django
          autostart=true
          autorestart=true
          redirect_stderr=true
          stdout_logfile=/var/log/django/celery_beat.log
          environment=DJANGO_SETTINGS_MODULE="myproject.settings_production"
          EOF
          
          # Configure Nginx
          cat > /etc/nginx/sites-available/django << 'EOF'
          upstream django {
              server 127.0.0.1:8000;
          }
          
          server {
              listen 80;
              server_name _;
              
              client_max_body_size 100M;
              
              location /static/ {
                  alias /app/static/;
                  expires 30d;
                  add_header Cache-Control "public, immutable";
              }
              
              location /media/ {
                  alias /app/media/;
                  expires 7d;
              }
              
              location / {
                  proxy_pass http://django;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_redirect off;
                  proxy_buffering off;
              }
          }
          EOF
          
          ln -sf /etc/nginx/sites-available/django /etc/nginx/sites-enabled/
          rm -f /etc/nginx/sites-enabled/default
          
          # Set permissions
          chown -R django:django /app
          mkdir -p /var/log/django
          chown -R django:django /var/log/django
          
          # Run migrations
          cd /app
          sudo -u django venv/bin/python manage.py migrate --settings=myproject.settings_production
          sudo -u django venv/bin/python manage.py collectstatic --noinput --settings=myproject.settings_production
          
          # Start services
          systemctl restart nginx
          systemctl restart supervisor